name: Release CLI

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            TODO: Write release notes
          draft: false
          prerelease: false

  build:
    name: Release Artifacts
    needs:
      - create-release
    strategy:
      matrix:
        box:
          - { runner: ubuntu-20.04, os-and-arch: linux-amd64, content-type: gzip, extension: tar.gz }
          - { runner: arm-runner, os-and-arch: linux-arm64, content-type: gzip, extension: tar.gz }
          - { runner: macos-12, os-and-arch: macos-amd64, content-type: gzip, extension: tar.gz }
          - { runner: windows-2022, os-and-arch: windows-amd64, content-type: zip, extension: zip }
    runs-on: ${{ matrix.box.runner }}
    timeout-minutes: 45
    steps:
      - name: Install dependencies
        if: ${{ matrix.box.os-and-arch == 'linux-amd64' ||  matrix.box.os-and-arch == 'linux-arm64' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends curl build-essential libssl-dev pkg-config

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: actions/checkout@v3
      - name: Build
        run: |
          cd cli
          cargo build --release

      - name: Package on Unix
        if: ${{ matrix.box.os-and-arch != 'windows-amd64' }}
        run: |
          cd ./target/release && tar -czvf dbdev.tar.gz ./dbdev

      - name: Package on Windows
        if: ${{ matrix.box.os-and-arch == 'windows-amd64' }}
        run: |
          cd ./target/release && Compress-Archive -Path ./dbdev -Destination dbdev.zip

      - name: Get Upload Url
        run: echo UPLOAD_URL=$(curl --silent https://api.github.com/repos/${{ github.repository }}/releases/latest | jq .upload_url --raw-output) >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./cli/target/release/dbdev.${{ matrix.box.extension }}
          asset_name: dbdev-${{ github.ref_name }}-${{ matrix.box.os-and-arch }}.${{ matrix.box.extension }}
          asset_content_type: application/${{ matrix.box.content-type }}
